{"version":3,"file":"static/js/291.29d30143.chunk.js","mappings":"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","sources":["components/App/App.styled.js","components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  color: #fff;\n  padding: 24px;\n`;\n","import { styled } from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  border-radius: 4px;\n  border: 1px solid #fff;\n  padding: 48px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 40px;\n`;\n\nexport const StyledField = styled(Field)`\n  display: block;\n  width: 100%;\n  padding: 8px 12px;\n  font-weight: 600;\n  line-height: 1.5;\n  border-radius: 4px;\n`;\n\nexport const StyledBtn = styled.button`\n  padding: 12px 24px;\n  margin-top: 16px;\n  background-color: #e6b333;\n  border-radius: 4px;\n  font-weight: 600;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    color: #d3d3d3;\n    box-shadow: -5px -5px 20px rgba(230, 179, 51, 0.5),\n      5px 5px 20px rgba(201, 196, 196, 0.5);\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 12px;\n  color: #b86161;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport {\n  StyledForm,\n  StyledField,\n  StyledBtn,\n  ErrorMsg,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'\"\n    )\n    .max(22)\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .max(12)\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const dispatch = useDispatch();\n  const items = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const existingContact = items.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (existingContact) {\n      toast(`Contact with name ${values.name} already exists!`);\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <label htmlFor={nameInputId}>Name</label>\n        <StyledField\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          autoComplete=\"off\"\n        />\n        <ErrorMsg name=\"name\" component=\"div\" />\n        <label htmlFor={numberInputId}>Number</label>\n        <StyledField\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          autoComplete=\"off\"\n        />\n        <ErrorMsg name=\"number\" component=\"div\" />\n        <StyledBtn type=\"submit\">Add contact</StyledBtn>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  padding: 0;\n`;\n\nexport const StyledContactListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 16px;\n  background-color: #f5f5f5;\n  border: 1px solid #e0e0e0;\n  border-radius: 4px;\n  margin-bottom: 8px;\n  font-weight: 600;\n  color: #000;\n`;\n\nexport const StyledDeleteButton = styled.button`\n  background-color: #e6b333;\n  color: #000;\n  border: none;\n  border-radius: 4px;\n  padding: 6px 12px;\n  margin-left: 24px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    color: #d3d3d3;\n    box-shadow: -5px -5px 20px rgba(230, 179, 51, 0.5),\n      5px 5px 20px rgba(201, 196, 196, 0.5);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  StyledContactList,\n  StyledContactListItem,\n  StyledDeleteButton,\n} from './ContactList.styled';\n\nimport { useEffect } from 'react';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {contacts && (\n        <StyledContactList>\n          {filteredContacts.map(({ id, name, number }) => (\n            <StyledContactListItem key={id}>\n              {name}: {number}\n              <StyledDeleteButton onClick={() => dispatch(deleteContact(id))}>\n                Delete\n              </StyledDeleteButton>\n            </StyledContactListItem>\n          ))}\n        </StyledContactList>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const StyledInput = styled.input`\n  display: block;\n  background-color: transparent;\n  min-width: 340px;\n  padding: 12px 24px;\n  border-radius: 4px;\n  color: #fff;\n  border: 2px solid #fff;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Label, StyledInput } from './Filter.styled';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      Find contacts by name\n      <StyledInput\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </Label>\n  );\n};\n","import { Container } from 'components/App/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !isError && <Loader />}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","StyledForm","Form","StyledField","Field","_templateObject2","StyledBtn","_templateObject3","ErrorMsg","ErrorMessage","_templateObject4","selectContacts","state","contacts","items","selectError","error","selectIsLoading","isLoading","selectFilteredContacts","createSelector","filter","_ref","name","toLowerCase","includes","schema","Yup","shape","matches","max","required","number","ContactForm","nameInputId","nanoid","numberInputId","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","toast","concat","addContact","children","_jsxs","htmlFor","type","id","autoComplete","component","StyledContactList","StyledContactListItem","StyledDeleteButton","ContactList","filteredContacts","useEffect","fetchContacts","_Fragment","Loader","map","onClick","deleteContact","Label","StyledInput","Filter","onChange","e","setFilter","target","value","isError"],"sourceRoot":""}